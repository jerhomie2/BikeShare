library(ggfortify)
# residual vs fitted values
autoplot(fat_lm)
# residual vs fitted values
autoplot(fat_lm, which = 1)
# residual vs fitted values
autoplot(fat_lm, which = 1, nrow = 2, ncol = 2)
# residual vs fitted values
autoplot(fat_lm, which = 1, nrow = 1, ncol = 1)
# Diagnostic 1
hist(fat_lm$residuals)
# Diagnostic 1
hist(fat_lm$residuals, title(main = "Histogram of Residuals", x = "residuals", y = "count"))
# Diagnostic 1
hist(fat_lm$residuals, title(main = "Histogram of Residuals", xlab = "residuals", ylab = "count"))
# Diagnostic 1
hist(fat_lm$residuals)
# Diagnostic 1
hist(fat_lm$residuals, main = "Histogram of Residuals", xlab = "residuals", ylab = "count")
# Diagnostic 2
autoplot(fat_lm, which = 2)
# Diagnostic 2
autoplot(fat_lm, which = 2, nrow = 1, ncol = 1)
# Diagnostic 3
shapiro.test(fat_lm)
# Diagnostic 3
shapiro.test(fat_lm$residuals)
autoplot(fat_lm, which = 3, nrow = 1, ncol = 1)
# residual vs. predictor plots
ggplot(fat_lm, aes(x = residuals, y = fitted.values))
# residual vs. predictor plots
ggplot(fat_lm, aes(x = residuals, y = fitted.values)) +
geom_point()
# residual vs. predictor plots
ggplot(bodyfat, aes(x = residuals, y = brozeck)) +
geom_point()
# residual vs. predictor plots
ggplot(bodyfat, aes(x = residuals, y = brozek)) +
geom_point()
# partial regression plots
ggpairs(bodyfat)
# partial regression plots
pairs(bodyfat)
library(tidyverse)
library(corrplot)
library(GGally)
library(ggfortify)
bodyfat <- read.table("BodyFat.txt", header = T)
bodyfat <- bodyfat |> select(-"row")
pairs(bodyfat)
cor(bodyfat)
corrplot(cor(bodyfat))
fat_lm <- lm(brozek ~ ., data = bodyfat)
bodyfat$residuals <- fat_lm$residuals
summary(fat_lm)
# partial regression plots
pairs(bodyfat)
# Cook's Distance
autoplot(fat_lm, which = 4, nrow = 1, ncol = 1)
# load packages here
library(tidyverse)
library(ggfortify) # needed for autoplot with lm objects
library(car)  # needed for added-variable plots
library(corrplot)  # colored correlation matrix
library(patchwork)  # plot plots next to each other
# (You may need to install some of these packages first)
super <- read_table("Supervisor.txt")
summary(super)
plot(super)
pairs(super, pch = 19, lower.panel = NULL) # this omits the duplicated half
ggpairs(super)
## ggplot version
library(GGally) # May have to install this package
ggpairs(super)
round(cor(super), 2)
corrplot(cor(super), type = "upper")
round(cor(super), 2)
corrplot(cor(super), type = "upper")
super_lm <- lm(rating ~ ., data = super)
super_lm <- lm(Rating ~ ., data = super)
super$residuals <- super_lm$residuals
super$fitted.values <- super_lm$fitted.values
autoplot(super_lm, which = 1)
autoplot(super_lm, which = 1, nrow = 1, ncol = 1)
resid_vs_complaints <- ggplot(data = super) +
geom_point(mapping = aes(x = Complaints, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_privileges <- ggplot(data = super) +
geom_point(mapping = aes(x = Privileges, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_learn <- ggplot(data = super) +
geom_point(mapping = aes(x = Learn, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_raises <- ggplot(data = super) +
geom_point(mapping = aes(x = Raises, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_critical <- ggplot(data = super) +
geom_point(mapping = aes(x = Critical, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_advance <- ggplot(data = super) +
geom_point(mapping = aes(x = Advance, y = residuals)) +
theme(aspect.ratio = 1)
# put plots in 2 rows & 3 columns using the patchwork package
(resid_vs_complaints | resid_vs_privileges | resid_vs_learn) /
(resid_vs_raises | resid_vs_critical | resid_vs_advance)
avPlots(super_lm)
hist(super$residuals)
autoplot(super_lm, which = 2)
autoplot(super_lm, which = 2, nrow = 1, ncol = 1)
shapiro.test(super_lm)
shapiro.test(super$residuals)
hist(super$residuals, title = "Histogram of Residuals")
hist(super$residuals, title = "Histogram of Residuals", xlab = "Residuals")
?hist
hist(super$residuals, main = "Histogram of Residuals", xlab = "Residuals")
autoplot(super_lm, which = 3, nrow = 1, ncol = 1)
autoplot(super_lm, which = 4, nrow = 1, ncol = 1)
vif(super_lm)
confint(super$Rating)
confint(super_lm)
ggpairs(super (-residuals))
ggpairs(super[1:6])
ggpairs(super[1:7])
corrplot(cor(super[1:7]), type = "upper")
predict(super_lm)
predict(super)
mean(vif(super_lm))
predict(super_lm, newdata = c(Complaints = 60,
Privileges = 50,
Learn = 56,
Raises = 63,
Critical = 76,
Advance = 40),
interval = "confidence",
level = 0.95)
predict(super_lm, newdata = data.frame(c(Complaints = 60,
Privileges = 50,
Learn = 56,
Raises = 63,
Critical = 76,
Advance = 40)),
interval = "confidence",
level = 0.95)
predict(super_lm, newdata = data.frame(Complaints = 60,
Privileges = 50,
Learn = 56,
Raises = 63,
Critical = 76,
Advance = 40),
interval = "confidence",
level = 0.95)
data(attitude)
mod <- lm(rating ~ ., data = attitude)
x0 <- data.frame(complaints = 60,
privileges = 50,
learning = 56,
raises = 63,
critical = 76,
advance = 40)
predict(mod,
newdata = x0,
interval = "confidence",
level = 0.95)
predict(super_lm, newdata = data.frame(Complaints = 60,
Privileges = 50,
Learn = 56,
Raises = 63,
Critical = 76,
Advance = 40),
interval = "prediction",
level = 0.95)
x0 <- data.frame(Complaints = 60,
Privileges = 50,
Learn = 56,
Raises = 63,
Critical = 76,
Advance = 40)
predict(super_lm, newdata = x0,
interval = "confidence",
level = 0.95)
predict(super_lm, newdata = x0,
interval = "prediction",
level = 0.95)
anova(super_lm, super_lm_reduced) # Must put it your own lm from previously
super_lm_reduced <- lm(Rating ~
Complaints +
Privileges +
Critical +
Advance,
data = super)
anova(super_lm, super_lm_reduced) # Must put it your own lm from previously
library(tidyverse)
library(corrplot)
library(GGally)
library(ggfortify)
bodyfat <- read.table("BodyFat.txt", header = T)
bodyfat <- bodyfat |> select(-"row")
pairs(bodyfat)
cor(bodyfat)
corrplot(cor(bodyfat))
# residual vs. predictor plots
resid_vs_age <- ggplot(data = bodyfat) +
geom_point(mapping = aes(x = age, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_age
library(tidyverse)
library(corrplot)
library(GGally)
library(ggfortify)
bodyfat <- read.table("BodyFat.txt", header = T)
bodyfat <- bodyfat |> select(-"row")
pairs(bodyfat)
cor(bodyfat)
corrplot(cor(bodyfat))
fat_lm <- lm(brozek ~ ., data = bodyfat)
bodyfat$residuals <- fat_lm$residuals
summary(fat_lm)
View(bodyfat)
library(car)
# residual vs. predictor plots
resid_vs_age <- ggplot(data = bodyfat) +
geom_point(mapping = aes(x = age, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_age
# residual vs. predictor plots
resid_vs_age <- ggplot(data = bodyfat) +
geom_point(mapping = aes(x = age, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_weight <- ggplot(data = bodyfat) +
geom_point(mapping = aes(x = weight, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_height <- ggplot(data = bodyfat) +
geom_point(mapping = aes(x = height, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_neck <- ggplot(data = bodyfat) +
geom_point(mapping = aes(x = neck, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_chest <- ggplot(data = bodyfat) +
geom_point(mapping = aes(x = chest, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_abdom <- ggplot(data = bodyfat) +
geom_point(mapping = aes(x = abdom, y = residuals)) +
theme(aspect.ratio = 1)
(resid_vs_age | resid_vs_weight | resid_vs_height)
(resid_vs_age | resid_vs_weight | resid_vs_height)
(resid_vs_age | resid_vs_weight | resid_vs_height) /
(resid_vs_neck | resid_vs_chest | resid_vs_abdom)
# partial regression plots
avPlots(fat_lm)
vif(fat_lm)
# residual vs. predictor plots
resid_vs_age <- ggplot(data = bodyfat) +
geom_point(mapping = aes(x = age, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_weight <- ggplot(data = bodyfat) +
geom_point(mapping = aes(x = weight, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_height <- ggplot(data = bodyfat) +
geom_point(mapping = aes(x = height, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_neck <- ggplot(data = bodyfat) +
geom_point(mapping = aes(x = neck, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_chest <- ggplot(data = bodyfat) +
geom_point(mapping = aes(x = chest, y = residuals)) +
theme(aspect.ratio = 1)
resid_vs_abdom <- ggplot(data = bodyfat) +
geom_point(mapping = aes(x = abdom, y = residuals)) +
theme(aspect.ratio = 1)
(resid_vs_age | resid_vs_weight | resid_vs_height) /
(resid_vs_neck | resid_vs_chest | resid_vs_abdom)
ggplot(data = bodyfat) +
geom_point(mapping = aes(x = age, y = residuals)) +
theme(aspect.ratio = 1)
library(patchwork)
# load packages here
library(tidyverse)
library(ggfortify) # needed for autoplot with lm objects
library(car)  # needed for added-variable plots
library(corrplot)  # colored correlation matrix
library(patchwork)  # plot plots next to each other
# (You may need to install some of these packages first)
ln(2)
log(2)
log(10)
2^15
2^20
2^30
#Paul's wd
setwd("C:/Users/basep/Box/STAT330FinalProject")
plot(data_lm_crime)
data_lm_crime <- lm(CrimeIndexRate ~ year + population +
NYMGames + NYMRecord + NYMRunDiff + NYMAttendance +
NYMFinishWC + NYMFinishDS + NYMFinishCS +
NYMFinishWS + NYMFinishWonWS +
NYYGames + NYYRecord + NYYRunDiff + NYYAttendance +
NYYFinishWC + NYYFinishDS + NYYFinishCS +
NYYFinishWS + NYYFinishWonWS +
NYJGames + NYJRecord + NYJPtDiff +
NYJFinishWC + NYJFinishDiv + NYJFinishConf +
NYJFinishSB + NYJFinishWonSB +
NYGGames + NYGRecord + NYGPtDiff +
NYGFinishWC + NYGFinishDiv + NYGFinishConf +
NYGFinishSB + NYGFinishWonSB +
NYKGames + NYKRecord +
NYKFinish1R + NYKFinishSemi + NYKFinishConf,
data = data)
data <- read.csv("FinalProject.csv") %>%
rename(NYMFinishWonWS = NYMWonWS,
NYYFinishWonWS = NYYWonWS,
NYJFinishWonSB = NYJWonSB,
NYGFinishWonSB = NYGWonSB,
NYKFinishWonFinals = NYKWonFinals,
NYNFinishWonFinals = NYNWonFinals)
#Jaroms' wd
setwd("C:/Users/jarom/Box/STAT330FinalProject")
library(tidyverse)
data <- read.csv("FinalProject.csv") %>%
rename(NYMFinishWonWS = NYMWonWS,
NYYFinishWonWS = NYYWonWS,
NYJFinishWonSB = NYJWonSB,
NYGFinishWonSB = NYGWonSB,
NYKFinishWonFinals = NYKWonFinals,
NYNFinishWonFinals = NYNWonFinals)
data_lm_crime <- lm(CrimeIndexRate ~ year + population +
NYMGames + NYMRecord + NYMRunDiff + NYMAttendance +
NYMFinishWC + NYMFinishDS + NYMFinishCS +
NYMFinishWS + NYMFinishWonWS +
NYYGames + NYYRecord + NYYRunDiff + NYYAttendance +
NYYFinishWC + NYYFinishDS + NYYFinishCS +
NYYFinishWS + NYYFinishWonWS +
NYJGames + NYJRecord + NYJPtDiff +
NYJFinishWC + NYJFinishDiv + NYJFinishConf +
NYJFinishSB + NYJFinishWonSB +
NYGGames + NYGRecord + NYGPtDiff +
NYGFinishWC + NYGFinishDiv + NYGFinishConf +
NYGFinishSB + NYGFinishWonSB +
NYKGames + NYKRecord +
NYKFinish1R + NYKFinishSemi + NYKFinishConf,
data = data)
plot(data_lm_crime)
plot(data_lm_crime, which = 1)
avplot(data_lm_crime)
# library(ggfortify)
library(car)
avPlots(data_lm_crime)
data_lm_crime <- lm(CrimeIndexRate ~ year + population +
NYMGames + NYMRecord + NYMRunDiff + NYMAttendance +
NYMFinishWC + NYMFinishDS + NYMFinishCS +
NYMFinishWS + NYMFinishWonWS +
NYYGames + NYYRecord + NYYRunDiff + NYYAttendance +
NYYFinishWC + NYYFinishDS + NYYFinishCS +
NYYFinishWS + NYYFinishWonWS +
#NYJGames + NYJRecord + NYJPtDiff +
#NYJFinishWC + NYJFinishDiv + NYJFinishConf +
#NYJFinishSB + NYJFinishWonSB +
#NYGGames + NYGRecord + NYGPtDiff +
#NYGFinishWC + NYGFinishDiv + NYGFinishConf +
#NYGFinishSB + NYGFinishWonSB +
NYKGames + NYKRecord +
NYKFinish1R + NYKFinishSemi + NYKFinishConf,
data = data)
avPlots(data_lm_crime)
data_lm_crime <- lm(CrimeIndexRate ~ year + population +
NYMGames + NYMRecord + NYMRunDiff + NYMAttendance +
NYMFinishWC + NYMFinishDS + NYMFinishCS +
NYMFinishWS + NYMFinishWonWS +
NYYGames + NYYRecord + NYYRunDiff + NYYAttendance +
NYYFinishWC + NYYFinishDS + NYYFinishCS +
NYYFinishWS + NYYFinishWonWS +
NYJGames + NYJRecord + NYJPtDiff +
NYJFinishWC + NYJFinishDiv + NYJFinishConf +
NYJFinishSB + NYJFinishWonSB +
NYGGames + NYGRecord + NYGPtDiff +
NYGFinishWC + NYGFinishDiv + NYGFinishConf +
NYGFinishSB + NYGFinishWonSB +
NYKGames + NYKRecord +
NYKFinish1R + NYKFinishSemi + NYKFinishConf,
data = data)
data_lm_crime <- lm(CrimeIndexRate ~ year + population +
NYMGames + NYMRecord + NYMRunDiff + NYMAttendance +
NYMFinishWC + NYMFinishDS + NYMFinishCS +
NYMFinishWS + NYMFinishWonWS +
NYYGames + NYYRecord + NYYRunDiff + NYYAttendance +
NYYFinishWC + NYYFinishDS + NYYFinishCS +
NYYFinishWS + NYYFinishWonWS +
NYJGames + NYJRecord + NYJPtDiff +
NYJFinishWC + NYJFinishDiv + NYJFinishConf +
NYJFinishSB + NYJFinishWonSB +
NYGGames + NYGRecord + NYGPtDiff +
NYGFinishWC + NYGFinishDiv + NYGFinishConf +
NYGFinishSB + NYGFinishWonSB +
NYKGames + NYKRecord +
NYKFinish1R + NYKFinishSemi + NYKFinishConf,
data = data)
install.package(tinytex)
install.package("tinytex")
install.packages("tinytex")
pwd
library(tidyverse)
library(tidymodels)
library(tidyverse)
library(tidymodels)
install.packages(tidymodels)
install.packages("tidymodels")
library(tidymodels)
library(tinytex)
library(tidyverse)
library(tidymodels)
install.packages("tidymodels")
library(tidymodels)
install.packages("DataExplorer")
library(DataExplorer)
library(patchwork)
vroom(train.csv) # like read.csv ish but faster
library(tidyverse)
library(tidymodels)
library(DataExplorer)
library(patchwork)
vroom(train.csv) # like read.csv ish but faster
library(vroom)
vroom(train.csv) # like read.csv ish but faster
vroom("train.csv") # like read.csv ish but faster
setwd()
setwd("/Users/jarom/Stat348/BikeShare/")
vroom("train.csv") # like read.csv ish but faster
train <- vroom("train.csv") # like read.csv ish but faster
train
glimpse(train) # lists variable type of each column
plot_correlation(train)
plot_intro(train)
plot_correlation(train)
plot1 <- ggplot(train, mapping = aes(x = temp, y = count))
plot1 <- ggplot(train,
mapping = aes(x = temp, y = count)) +
geom_point()
plot1
plot1 <- ggplot(train,
mapping = aes(x = temp, y = count)) +
geom_point() +
geom_smooth(se = F)
plot1
temp <- ggplot(train,
mapping = aes(x = temp, y = count)) +
geom_point() +
geom_smooth(se = F)
weather <- ggplot(train,
mapping = aes(x = weather, y = count)) +
geom_point() +
geom_smooth(se = F)
weather
weather <- ggplot(train,
mapping = aes(x = weather, y = count)) +
geom_bar()
weather
weather <- ggplot(train,
mapping = aes(x = weather, y = count)) +
geom_bar()
weather
weather <- ggplot(train,
mapping = aes(x = weather)) +
geom_bar()
weather
count(train$weather)
count(train$weather$4)
train <- train(as.factor(weather))
train <- as.factor(train$weather)
weather <- ggplot(train,
mapping = aes(x = weather)) +
geom_bar()
glimpse(train) # lists variable type of each column
plot_intro(train)
plot_correlation(train)
train <- vroom("train.csv") # like read.csv ish but faster
plot_correlation(train)
season <- ggplot(train,
mapping = aes(x = season)) +
geom_bar()
season
season <- ggplot(train,
mapping = aes(x = season)) +
geom_boxplot()
season
season <- ggplot(train,
mapping = aes(x = season)) +
geom_bar()
season
library(tidyverse)
library(tidymodels)
library(DataExplorer)
library(patchwork)
library(vroom)
train <- vroom("train.csv") # like read.csv ish but faster
glimpse(train) # lists variable type of each column
plot_intro(train)
plot_correlation(train)
humidity <- ggplot(train,
mapping = aes(x=humidity, y = count)) +
geom_point() +
geom_abline(se = F)
humidity <- ggplot(train,
mapping = aes(x=humidity, y = count)) +
geom_point() +
geom_line(se = F)
humidity <- ggplot(train,
mapping = aes(x=humidity, y = count)) +
geom_point() +
geom_smooth(se = F)
(temp + weather) / (season + humidity)
4panels <- (temp + weather) / (season + humidity)
panels <- (temp + weather) / (season + humidity)
ggsave(panels)
